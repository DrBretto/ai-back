DROP TABLE IF EXISTS users, Stocks, StockHistory, StockRealtime;

CREATE TABLE users (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    email TEXT NOT NULL UNIQUE,
    password TEXT NOT NULL UNIQUE,
    date_created TIMESTAMP DEFAULT now() NOT NULL,
    date_modified TIMESTAMP
);

CREATE TABLE Stocks (
    stock_id SERIAL PRIMARY KEY,
    symbol VARCHAR(10) UNIQUE NOT NULL
);

INSERT INTO Stocks (symbol) VALUES ('JDST'), ('NUGT');

CREATE TABLE StockHistory (
    history_id SERIAL PRIMARY KEY,
    stock_id INT REFERENCES Stocks(stock_id),
    date_time TIMESTAMPTZ NOT NULL,
    closing_price DECIMAL(10, 4) NOT NULL,
    high_price DECIMAL(10, 4) NOT NULL,
    low_price DECIMAL(10, 4) NOT NULL,
    volume INT NOT NULL,
    UNIQUE(stock_id, date_time)
);

CREATE TABLE StockRealtime (
    history_id            SERIAL PRIMARY KEY,
    stock_id              INT REFERENCES Stocks(stock_id),
    date_time             TIMESTAMPTZ NOT NULL,
    closing_price         DECIMAL(10, 4) NOT NULL,
    high_price            DECIMAL(10, 4),
    low_price             DECIMAL(10, 4),
    opening_price         DECIMAL(10, 4),
    daily_change          DECIMAL(10, 4),
    daily_percent_change  DECIMAL(10, 4),
    previous_close        DECIMAL(10, 4),
    UNIQUE(stock_id, date_time)
);

INSERT INTO Stocks (symbol) VALUES ('JDST'), ('NUGT');


CREATE TABLE subjects (
  id SERIAL PRIMARY KEY,
  name TEXT UNIQUE NOT NULL
);

INSERT INTO subjects (name) VALUES ('gold'), ('dollar');

CREATE TABLE sources (
  id SERIAL PRIMARY KEY,
  name TEXT UNIQUE NOT NULL
);

INSERT INTO sources (name) VALUES ('tradingview');

CREATE TABLE sentiment_analysis (
  id SERIAL PRIMARY KEY,
  pull_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
  subject_id INTEGER REFERENCES subjects(id) NOT NULL,
  source_id INTEGER REFERENCES sources(id) NOT NULL,
  tokenized_sentiment TEXT,
  average_score NUMERIC(6, 4),
  low_score NUMERIC(6, 4),
  high_score NUMERIC(6, 4)
);

CREATE TABLE master_tokens (
    id SERIAL PRIMARY KEY,
    term VARCHAR(255) UNIQUE NOT NULL,
    token_value INT UNIQUE NOT NULL
);
